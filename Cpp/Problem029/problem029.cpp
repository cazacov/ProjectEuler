/* Project Euler
 * Problem 29: Distinct powers
 * https://projecteuler.net/problem=29
 *
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence
 * of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */

#include <iostream>
#include <sstream>

#include "PrimesInRange.h"
#include "Factorizer.h"

std::string calculate_power_fingerprint(std::vector<std::pair<int, int>> &factors, int power);

int main() {
    const int N = 100;

    PrimesInRange primesPool(N);
    Factorizer factorizer(primesPool.primes);

    std::set<std::string> fingerprints;

    for (int a = 2; a <= N; a++) {
        auto factors = factorizer.do_factorization(a);
        int b = 2;
        do {
            auto fingerprint = calculate_power_fingerprint(factors, b);
            fingerprints.insert(fingerprint);
            b++;
        } while(b <= N);
    }


    std::cout << fingerprints.size() << std::endl;
    return 0;
}

std::string calculate_power_fingerprint(std::vector<std::pair<int, int>> &factors, int power) {
    std::stringstream result;
    result << 1;

    for(auto factor: factors) {
        result << " * " << factor.first << "^" << factor.second * power;
    }

    return result.str();
}
