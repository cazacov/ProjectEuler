/* Project Euler
 * Problem 44: Pentagon numbers
 * https://projecteuler.net/problem=44
 *
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
 * and D = |Pk − Pj| is minimised; what is the value of D?
 */

#include <iostream>
#include <map>

const int N = 400000;

std::map<long, int > cache;


int is_pentagon(const long number)
{
    if (number > (long)N*(N*3-1)) {
        std::cout << "The cache is too small";
        exit(-1);
    }

    if (cache.count(number)) {
        return cache[number];
    }
    else {
        cache[number] = 0;
    }
    return 0;
}

int main() {

    // Fill the cache
    for (int i = 1; i < N; i++) {
        cache[(long)i*(3*i - 1)] = i;
    }

    long n = 1;
    do {
        long dif = n*(3*n -1);
        for (long m = 1; m <= (dif - 2) / 6; m++)
        {
            long p1 = m * (3*m - 1);
            long p2 = p1 + dif;

            auto pos2 = is_pentagon(p2);
            if (!pos2) {
                continue;
            }

            auto pos_sum = is_pentagon(p1 + p2);
            if (!pos_sum) {
                continue;
            }

            std::cout << p1 << " (p" << m <<  ") + " << dif << "(p" << n << ") = " << p2 << " (p" << pos2 << ")" << std::endl;
            std::cout << p1 << " (p" << m <<  ") +" << p2  << " (p" << pos2 << ") = " << p1+p2 <<  " (p" << pos_sum << ")" << std::endl;
            return 0;
        }
        n++;
    } while (true);
}